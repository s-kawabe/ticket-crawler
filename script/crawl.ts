import { chromium, type Browser, type Locator, type Page } from 'playwright';
import readline from 'readline';
import fs from 'fs';
import axios from 'axios';
import FormData from 'form-data';
import { validURL } from './utils.js';

const LINE_API_TOKEN = 'NcuPqEuEIUxrJTvLooSl70HO9noTG4QPMaFPWE740Jh';

const loopCheckTicketCards = async ({
  elements,
  browser,
  page,
  expectedTexts,
}: {
  elements: Locator;
  browser: Browser;
  page: Page;
  expectedTexts: string[];
}): Promise<boolean> => {
  if ((await elements.count()) === 0) {
    return false;
  }

  for (let i = 0; i < (await elements.count()); i++) {
    const element = elements.nth(i);
    const textbox = element.locator('.item_result_box .item_result_box_msg');
    for (const text of expectedTexts) {
      const stringTextbox = await textbox.innerHTML();
      if (stringTextbox.includes('ÔºíÈöé') && stringTextbox.includes(text)) {
        try {
          console.log('„ÉÅ„Ç±„ÉÉ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„ÅüÔºÅ LINE„Å´ÁîªÂÉè„ÇíÈÄÅ„Çã„Çæ„Ç¶üêò');
          await element.screenshot({ path: './script/assets/ticket.png' });
          await element.click();
          const form = new FormData();
          form.append('imageFile', fs.createReadStream('script/assets/ticket.png'));
          form.append('message', `„É™„Çª„Éº„É´„ÅßÂ∏åÊúõ„ÅÆ„ÉÅ„Ç±„ÉÉ„Éà„ÅåÂá∫„Å¶„Çã„ÇàÔºÅüêò\n${page.url()}`);
          await axios({
            method: 'post',
            url: 'https://notify-api.line.me/api/notify',
            headers: {
              ...form.getHeaders(),
              Authorization: `Bearer ${LINE_API_TOKEN}`,
            },
            data: form,
          });

          await browser.close();
          return true;
        } catch (err) {
          console.error(err);
          return false;
        }
      }
    }
  }
  return false;
};

const runCrawlPia = async (url: string, expectedTexts: string[]) => {
  console.log('---------------------------------');
  console.log('„Çµ„Ç§„Éà„ÇíÂ∑°Âõû„Åó„Å¶„Åè„Çã„Çæ„Ç¶„Äú üêò');
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  await page.goto(url);

  while (true) {
    const elements = page.locator('.item_result_wrapper ol');
    const result = await loopCheckTicketCards({ elements, browser, page, expectedTexts });
    if (result) {
      await browser.close();
      return;
    }

    const nextPage = page.locator('.pager_arr_last');
    const hasNextPage = (await nextPage.count()) !== 0;
    if (hasNextPage) {
      await nextPage.click();
    } else {
      console.log('„ÉÅ„Ç±„ÉÉ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü... üêò');
      await browser.close();
      return;
    }
  }
};

(() => {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  console.log(`
    „É™„Çª„Éº„É´Â∑°Âõû„Åû„ÅÜ„Åï„Çìüêò (beta) 
    
    ÔºèÔø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôºº
    |  „Éª  Ôºµ      |
    | |Œπ           |„Å§  == 3
    ÔºµÔΩúÔΩú Ôø£Ôø£ ÔΩúÔΩú
       Ôø£        Ôø£
    ----------------------------------
  `);
  rl.question(
    '„Å¥„ÅÇ„ÅÆ„É™„Çª„Éº„É´„Éö„Éº„Ç∏„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Å≠ÔºÅüêòÔºà‚ÄªÂÖ¨ÊºîÊó•„ÇÑ‰∫∫Êï∞„ÇíÁµû„ÇäËæº„Çì„Å†Âæå„ÅÆURL„Åå„Åä„Åô„Åô„ÇÅ„Åß„ÅôÔºâ > ',
    async (url) => {
      if (!validURL(url)) {
        console.log('> URL„ÅÆÂΩ¢Âºè„Åå‰∏çÊ≠£„Å†„Å±„Åä„Çì..üêò');
        rl.close();
        return;
      }

      await runCrawlPia(url, ['ÔºìÔºêÊââ']);
    },
  );
})();
